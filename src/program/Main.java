/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package program;

import entity.*;
import java.time.LocalDate;
import java.time.LocalTime;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.util.Optional;
import java.util.List;
import javax.swing.JOptionPane;


/**
 *
 * @author turta
 */
public class Main extends javax.swing.JFrame {
    private static DAO ClubDAO, RoomDAO, RoomReservationDAO;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        refreshClubTable();
        refreshRoomTable();
        refreshRoomReservationTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelClubName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldClubID = new javax.swing.JTextField();
        jTextFieldClubName = new javax.swing.JTextField();
        jTextFieldClubRegularMeetingDays = new javax.swing.JTextField();
        jTextFieldClubRegularMeetingTimes = new javax.swing.JTextField();
        jTextFieldClubPresident = new javax.swing.JTextField();
        jTextFieldClubMemberCount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClub = new javax.swing.JTable();
        jButtonClubInsert = new javax.swing.JButton();
        jButtonUpdateClub = new javax.swing.JButton();
        jButtonDeleteClub = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldRoomID = new javax.swing.JTextField();
        jTextFieldRoomName = new javax.swing.JTextField();
        jTextFieldRoomLocation = new javax.swing.JTextField();
        jTextFieldRoomCapacity = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRoom = new javax.swing.JTable();
        jButtonInsertRoom = new javax.swing.JButton();
        jButtonUpdateRoom = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRoomReservation = new javax.swing.JTable();
        jTextFieldRoomReservationID = new javax.swing.JTextField();
        jTextFieldRoomID2 = new javax.swing.JTextField();
        jTextFieldClubID2 = new javax.swing.JTextField();
        jTextFieldNumberofGuests = new javax.swing.JTextField();
        dateTimePickerReservationStartDateTime = new com.github.lgooddatepicker.components.DateTimePicker();
        dateTimePickerReservationEndDateTime = new com.github.lgooddatepicker.components.DateTimePicker();
        jButtonInsertRoomReservation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ClubID");

        jLabelClubName.setText("ClubName");

        jLabel3.setText("ClubRegularMeetingDays");

        jLabel4.setText("ClubRegularMeetingTimes");

        jLabel5.setText("ClubPresident");

        jLabel6.setText("ClubMemberCount");

        jTextFieldClubID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClubIDActionPerformed(evt);
            }
        });

        jTextFieldClubName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClubNameActionPerformed(evt);
            }
        });

        jTextFieldClubPresident.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClubPresidentActionPerformed(evt);
            }
        });

        jTableClub.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ClubID", "ClubName", "ClubRegularMeetingDays", "ClubRegularMeetingTimes", "ClubPresidentl", "ClubMemberCount"
            }
        ));
        jTableClub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableClubMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableClub);

        jButtonClubInsert.setText("Save");
        jButtonClubInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClubInsertActionPerformed(evt);
            }
        });

        jButtonUpdateClub.setText("Update");
        jButtonUpdateClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateClubActionPerformed(evt);
            }
        });

        jButtonDeleteClub.setText("Delete");
        jButtonDeleteClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteClubActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelClubName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldClubPresident, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(jTextFieldClubMemberCount, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldClubID)
                    .addComponent(jTextFieldClubName)
                    .addComponent(jTextFieldClubRegularMeetingDays)
                    .addComponent(jTextFieldClubRegularMeetingTimes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jButtonClubInsert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonUpdateClub)
                .addGap(18, 18, 18)
                .addComponent(jButtonDeleteClub)
                .addContainerGap(737, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldClubID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelClubName)
                            .addComponent(jTextFieldClubName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldClubRegularMeetingDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldClubRegularMeetingTimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextFieldClubPresident, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldClubMemberCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonClubInsert)
                    .addComponent(jButtonUpdateClub)
                    .addComponent(jButtonDeleteClub))
                .addGap(27, 27, 27))
        );

        jTabbedPane1.addTab("Club", jPanel2);

        jLabel2.setText("RoomID");

        jLabel7.setText("RoomName");

        jLabel8.setText("RoomLocation");

        jLabel9.setText("RoomCapacity");

        jTextFieldRoomID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRoomIDActionPerformed(evt);
            }
        });

        jTextFieldRoomLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRoomLocationActionPerformed(evt);
            }
        });

        jTableRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRoomMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableRoom);

        jButtonInsertRoom.setText("Save");
        jButtonInsertRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertRoomActionPerformed(evt);
            }
        });

        jButtonUpdateRoom.setText("Update");
        jButtonUpdateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateRoomActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextFieldRoomName))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextFieldRoomLocation))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextFieldRoomCapacity))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextFieldRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButtonInsertRoom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonUpdateRoom)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextFieldRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jTextFieldRoomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8))
                            .addComponent(jTextFieldRoomLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextFieldRoomCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonInsertRoom)
                            .addComponent(jButtonUpdateRoom)
                            .addComponent(jButton3)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Room", jPanel3);

        jLabel10.setText("RoomReservationID");

        jLabel11.setText("RoomID");

        jLabel12.setText("ClubID");

        jLabel13.setText("ReservationStartDateTime");

        jLabel14.setText("Reservation End Date Time");

        jLabel15.setText("NumberofGuests");

        jTableRoomReservation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "RoomReservationID", "RoomID", "ClubID", "ReservationStartDateTime", "ReservationEndDateTime", "NumberofGuests"
            }
        ));
        jTableRoomReservation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRoomReservationMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableRoomReservation);

        jTextFieldRoomReservationID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRoomReservationIDActionPerformed(evt);
            }
        });

        jTextFieldClubID2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClubID2ActionPerformed(evt);
            }
        });

        jButtonInsertRoomReservation.setText("Save");
        jButtonInsertRoomReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertRoomReservationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldNumberofGuests, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                .addComponent(jTextFieldClubID2)
                                .addComponent(jTextFieldRoomID2)
                                .addComponent(jTextFieldRoomReservationID))
                            .addComponent(dateTimePickerReservationStartDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateTimePickerReservationEndDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButtonInsertRoomReservation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldRoomReservationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextFieldRoomID2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextFieldClubID2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(dateTimePickerReservationStartDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(dateTimePickerReservationEndDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextFieldNumberofGuests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(jButtonInsertRoomReservation)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Room Reservation", jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldClubIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClubIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldClubIDActionPerformed

    private void jTextFieldClubNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClubNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldClubNameActionPerformed

    private void jTextFieldClubPresidentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClubPresidentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldClubPresidentActionPerformed

    private void jButtonClubInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClubInsertActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldClubID.getText().isEmpty()) {
         int CID = Integer.parseInt(jTextFieldClubID.getText().trim());
            String CName = jTextFieldClubName.getText().trim();
            String CRMD = jTextFieldClubRegularMeetingDays.getText().trim();
            String CRMT = jTextFieldClubRegularMeetingTimes.getText().trim();
            String CPres = jTextFieldClubPresident.getText().trim();
            int CMC = Integer.parseInt(jTextFieldClubMemberCount.getText().trim());
            primaryKeyViolationClub(CID);
            addClub(CID, CName, CRMD, CRMT, CPres, CMC);
            refreshClubTable();
            clearClubTextFields();
        }
        else{
                 alert("ID cannot be empty", "Insert error");
        }
        
    }//GEN-LAST:event_jButtonClubInsertActionPerformed

    private void jTableClubMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableClubMouseClicked
        // TODO add your handling code here:
        int i = jTableClub.getSelectedRow();
        TableModel model = jTableClub.getModel();
        jTextFieldClubID.setText(model.getValueAt(i, 0).toString());
        jTextFieldClubName.setText(model.getValueAt(i, 1).toString());
        jTextFieldClubRegularMeetingDays.setText(model.getValueAt(i, 2).toString());
        jTextFieldClubRegularMeetingTimes.setText(model.getValueAt(i, 3).toString());
        jTextFieldClubPresident.setText(model.getValueAt(i, 4).toString());
        jTextFieldClubMemberCount.setText(model.getValueAt(i, 5).toString());
    }//GEN-LAST:event_jTableClubMouseClicked

    private void jButtonUpdateClubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateClubActionPerformed
        // TODO add your handling code here:
         if (!jTextFieldClubID.getText().isEmpty()) {
            int CID = Integer.parseInt(jTextFieldClubID.getText().trim());
            String CName = jTextFieldClubName.getText().trim();
            String CRMD = jTextFieldClubRegularMeetingDays.getText().trim();
            String CRMT = jTextFieldClubRegularMeetingTimes.getText().trim();
            String CPres = jTextFieldClubPresident.getText().trim();
            int CMC = Integer.parseInt(jTextFieldClubMemberCount.getText().trim());
            Club club = getClub(CID);
            if(club.getClubID() != -1) {                
                updateClub(CID, CName, CRMD, CRMT, CPres, CMC);
                refreshClubTable();
            }
            else
            {
                alert("Customer does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateClubActionPerformed

    private void jButtonDeleteClubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteClubActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldClubID.getText().isEmpty()) {
            int CID = Integer.parseInt(jTextFieldClubID.getText().trim());
            String CName = jTextFieldClubName.getText().trim();
            String CRMD = jTextFieldClubRegularMeetingDays.getText().trim();
            String CRMT = jTextFieldClubRegularMeetingTimes.getText().trim();
            String CPres = jTextFieldClubPresident.getText().trim();
            int CMC = Integer.parseInt(jTextFieldClubMemberCount.getText().trim());
            Club club = getClub(CID);
            if(club.getClubID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteClub(CID, CName, CRMD, CRMT, CPres, CMC);
                    refreshClubTable();
                    clearClubTextFields();
                }
            }
            else
            {
                alert("Customer does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteClubActionPerformed

    private void jTextFieldRoomIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldRoomIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldRoomIDActionPerformed

    private void jTextFieldRoomLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldRoomLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldRoomLocationActionPerformed

    private void jTableRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRoomMouseClicked
        // TODO add your handling code here:
        int i = jTableRoom.getSelectedRow();
        TableModel model = jTableRoom.getModel();
        jTextFieldRoomID.setText(model.getValueAt(i, 0).toString());
        jTextFieldRoomName.setText(model.getValueAt(i, 1).toString());
        jTextFieldRoomLocation.setText(model.getValueAt(i, 2).toString());
        jTextFieldRoomCapacity.setText(model.getValueAt(i, 3).toString());
    }//GEN-LAST:event_jTableRoomMouseClicked

    private void jButtonInsertRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertRoomActionPerformed
        // TODO add your handling code here:
           if (!jTextFieldRoomID.getText().isEmpty()) {
            int RID = Integer.parseInt(jTextFieldRoomID.getText().trim());
            String RName = jTextFieldRoomName.getText().trim();
            String RLoc = jTextFieldRoomLocation.getText().trim();
            int RCap = Integer.parseInt(jTextFieldRoomCapacity.getText().trim());
            primaryKeyViolationRoom(RID);
            addRoom(RID, RName, RLoc, RCap);
            refreshRoomTable();
            clearRoomTextFields();
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
                                                       

    }//GEN-LAST:event_jButtonInsertRoomActionPerformed

    private void jButtonUpdateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateRoomActionPerformed
        // TODO add your handling code here:
         if (!jTextFieldRoomID.getText().isEmpty()) {
            int RID = Integer.parseInt(jTextFieldRoomID.getText().trim());
            String RName = jTextFieldRoomName.getText().trim();
            String RLoc = jTextFieldRoomLocation.getText().trim();
            int RCap = Integer.parseInt(jTextFieldRoomCapacity.getText().trim());
            Room room = getRoom(RID);
            if(room.getRoomID() != -1) {                
                updateRoom(RID, RName, RLoc, RCap);
                refreshRoomTable();
            }
            else
            {
                alert("Customer does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateRoomActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldRoomID.getText().isEmpty()) {
            int RID = Integer.parseInt(jTextFieldRoomID.getText().trim());
            String RName = jTextFieldRoomName.getText().trim();
            String RLoc = jTextFieldRoomLocation.getText().trim();
            int RCap = Integer.parseInt(jTextFieldRoomCapacity.getText().trim());
            Room room = getRoom(RID);
            if(room.getRoomID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteRoom(RID, RName, RLoc, RCap);
                    refreshRoomTable();
                    clearRoomTextFields();
                }
            }
            else
            {
                alert("Customer does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextFieldRoomReservationIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldRoomReservationIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldRoomReservationIDActionPerformed

    private void jTextFieldClubID2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClubID2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldClubID2ActionPerformed

    private void jTableRoomReservationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRoomReservationMouseClicked
        // TODO add your handling code here:
        int i = jTableRoomReservation.getSelectedRow();
        TableModel model = jTableRoomReservation.getModel();
        jTextFieldRoomReservationID.setText(model.getValueAt(i, 0).toString());
        jTextFieldRoomID.setText(model.getValueAt(i, 1).toString());
        jTextFieldClubID.setText(model.getValueAt(i, 3).toString());
        String date = model.getValueAt(i, 4).toString();
        
         LocalDate date1 = LocalDate.of(Integer.parseInt(date.substring(0, 4)) , 
                Integer.parseInt(date.substring(5, 7)), Integer.parseInt(date.substring(8, 10)));
        LocalTime time1 = LocalTime.of(Integer.parseInt(date.substring(11, 13)), Integer.parseInt(date.substring(14, 16)));
        
        dateTimePickerReservationStartDateTime.datePicker.setDate(date1);
        dateTimePickerReservationStartDateTime.timePicker.setTime(time1);
        
        String datee = model.getValueAt(i, 5).toString();
        
        LocalDate date2 = LocalDate.of(Integer.parseInt(datee.substring(0, 4)) , 
                Integer.parseInt(datee.substring(5, 7)), Integer.parseInt(datee.substring(8, 10)));
        LocalTime time2 = LocalTime.of(Integer.parseInt(datee.substring(11, 13)), Integer.parseInt(datee.substring(14, 16)));
        
        dateTimePickerReservationStartDateTime.datePicker.setDate(date2);
        dateTimePickerReservationStartDateTime.timePicker.setTime(time2);
        jTextFieldNumberofGuests.setText(model.getValueAt(i, 6).toString());
    }//GEN-LAST:event_jTableRoomReservationMouseClicked

    private void jButtonInsertRoomReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertRoomReservationActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldRoomReservationID.getText().isEmpty()) {
            int RRID = Integer.parseInt(jTextFieldRoomReservationID.getText().trim());
            String temp = jTextFieldRoomID.getText().trim();
            int RID = Integer.parseInt(temp);
            String temp2 = jTextFieldClubID.getText().trim();
            int CID = Integer.parseInt(temp2);
            String date1 = dateTimePickerReservationStartDateTime.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerReservationStartDateTime.timePicker.getTimeStringOrEmptyString();
            String date2 = dateTimePickerReservationEndDateTime.datePicker.getDateStringOrEmptyString() + " " + dateTimePickerReservationStartDateTime.timePicker.getTimeStringOrEmptyString();
            int NOG = Integer.parseInt(jTextFieldNumberofGuests.getText().trim());
            primaryKeyViolationRoomReservation(RRID);
            //foreignKeyViolationOrder(CID);
            addRoomReservation(RRID, RID, CID, date1, date2, NOG);
            refreshRoomReservationTable();
            clearRoomReservationTextFields();
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
       
    }//GEN-LAST:event_jButtonInsertRoomReservationActionPerformed
 
    //method to show an info alert
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }
    
    //method to check for order's club id foreign key violation
  /*  public void foreignKeyViolationOrder(int id) {
        if(get(id).getID() == -1) {
            alert("Club ID does not exist", "Foreign Key Violation");
        }
    }*/
    
    //method to check for club primary key violation
   public void primaryKeyViolationClub(int id) {
        if(getClub(id).getClubID() != -1) {
            alert("Another Club already exists with same Customer ID, please try another Customer ID", "Primary Key Violation");
        }
    }
    
    //method to check for Room primary key violation
    public void primaryKeyViolationRoom(int id) {
        if(getRoom(id).getRoomID() != -1) {
            alert("Another room already exists with same Order ID, please try another Order ID", "Primary Key Violation");
        }
    }
    
     public void primaryKeyViolationRoomReservation(int id) {
        if(getRoomReservation(id).getRoomReservationID() != -1) {
            alert("Another Room Reservation already exists with same Order ID, please try another Order ID", "Primary Key Violation");
        }
    }
    
    //method to show an error alert
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }

///table stuff
    private static void addClub(int ClubID, String ClubName, String RegularMeetingsDays, String RegularMeetingsTimes, String ClubPresident, int ClubMemberCount){
        Club club;
        club = new Club(ClubID, ClubName, RegularMeetingsDays, RegularMeetingsTimes, ClubPresident,ClubMemberCount);
        ClubDAO.insert(club);
        
    }
    
       private static void updateClub(int ClubID, String ClubName, String RegularMeetingsDays, String RegularMeetingsTimes, String ClubPresident, int ClubMemberCount) {
        Club club;
        club = new Club(ClubID, ClubName, RegularMeetingsDays, RegularMeetingsTimes, ClubPresident,ClubMemberCount);
        ClubDAO.update(club);
    }
    
    private static void deleteClub(int ClubID, String ClubName, String RegularMeetingsDays, String RegularMeetingsTimes, String ClubPresident, int ClubMemberCount) {
       Club club;
       club = new Club(ClubID, ClubName, RegularMeetingsDays, RegularMeetingsTimes, ClubPresident,ClubMemberCount);
       ClubDAO.delete(club);
    }
    
    static Club getClub(int id) {
        Optional<Club> club = ClubDAO.get(id);
        return club.orElseGet(() -> new Club(-1, "Non-exist", "Non-exist", "Non-exist","Non-exist",-1));
    }
    
    static void addRoom(int RoomID, String RoomName, String RoomLocation, int RoomCapacity ) {
        Room room;
        room = new Room(RoomID, RoomName, RoomLocation, RoomCapacity);
        RoomDAO.insert(room);
    }
    
     static void updateRoom(int RoomID, String RoomName, String RoomLocation, int RoomCapacity ) {
        Room room;
        room = new Room(RoomID, RoomName, RoomLocation, RoomCapacity);
        RoomDAO.update(room);
    }
     static void deleteRoom(int RoomID, String RoomName, String RoomLocation, int RoomCapacity ) {
        Room room;
        room = new Room(RoomID, RoomName, RoomLocation, RoomCapacity);
        RoomDAO.delete(room);
    }
    
    static Room getRoom(int id) {
        Optional<Room> room = RoomDAO.get(id);
        return room.orElseGet(() -> new Room(-1, "Non-exist", "Non-exist",-1));
    }
    
    static void addRoomReservation(int RoomReservationID, int RoomID, int ClubID, String ReservationStartDateTime, String ReservationEndDateTime, int NumberofGuests) {
        RoomReservation roomreservation;
        roomreservation = new RoomReservation(RoomReservationID,RoomID, ClubID, ReservationStartDateTime, ReservationEndDateTime, NumberofGuests);
        RoomReservationDAO.insert(roomreservation);
    }
    
    static void updateRoomReservation(int RoomReservationID, int RoomID, int ClubID, String ReservationStartDateTime, String ReservationEndDateTime, int NumberofGuests) {
        RoomReservation roomreservation;
        roomreservation = new RoomReservation(RoomReservationID,RoomID, ClubID, ReservationStartDateTime, ReservationEndDateTime, NumberofGuests);
        RoomReservationDAO.update(roomreservation);
    }
       
    static void deleteRoomReservation(int RoomReservationID, int RoomID, int ClubID, String ReservationStartDateTime, String ReservationEndDateTime, int NumberofGuests) {
        RoomReservation roomreservation;
        roomreservation = new RoomReservation(RoomReservationID,RoomID, ClubID, ReservationStartDateTime, ReservationEndDateTime, NumberofGuests);
        RoomReservationDAO.delete(roomreservation);
    }
    static RoomReservation getRoomReservation(int id) {
        Optional<RoomReservation> roomreservation = RoomReservationDAO.get(id);
        return roomreservation.orElseGet(() -> new RoomReservation(-1, -1, -1,  "Non-exist", "Non-exist", -1));
    }
    
    private void clearRoomTextFields() {
        jTextFieldRoomID.setText("");
        jTextFieldRoomName.setText("");
        jTextFieldRoomLocation.setText("");
        jTextFieldRoomCapacity.setText("");
       
    }
    private void clearClubTextFields() {
        jTextFieldClubID.setText("");
        jTextFieldClubName.setText("");
        jTextFieldClubRegularMeetingDays.setText("");
        jTextFieldClubRegularMeetingTimes.setText("");
        jTextFieldClubPresident.setText("");
        jTextFieldClubMemberCount.setText("");
       
    }
    
     private void clearRoomReservationTextFields() {
        jTextFieldRoomReservationID.setText("");
        jTextFieldRoomID.setText("");
        jTextFieldClubID.setText("");
        jTextFieldNumberofGuests.setText("");
    }

//fetch Club table
    private void refreshClubTable() {
        List<Club> clubs = ClubDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableClub.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Club club : clubs) {
                Object[] row = new Object[6];
                row[0] = club.getClubID();
                row[1] = club.getClubName();
                row[2] = club.getClubRegularMeetingDays();
                row[3] = club.getClubRegularMeetingTimes();
                row[4] = club.getClubPresident();
                row[5] = club.getClubMemberCount();
                model.addRow(row);
        }
    }
    
       //fetch Room table
    private void refreshRoomTable() {
        List<Room> rooms = RoomDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableRoom.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Room room : rooms) {
                Object[] row = new Object[4];
                row[0] = room.getRoomID();
                row[1] = room.getRoomName();
                row[2] = room.getRoomLocation();
                row[3] = room.getRoomCapacity();
                model.addRow(row);
        }
    }
     private void refreshRoomReservationTable() {
        List<RoomReservation> roomreservations = RoomReservationDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableRoomReservation.getModel();
        //Clear all items in tblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (RoomReservation roomreservation : roomreservations) {
                Object[] row = new Object[8];
                row[0] = roomreservation.getRoomReservationID();
                row[1] = roomreservation.getRoomID();
                row[2] = getRoom(roomreservation.getRoomID()).getRoomName();
                row[3] = roomreservation.getClubID();
                row[4] = getClub(roomreservation.getClubID()).getClubName();
                row[5] = roomreservation.getReservationStartDateTime();
                row[6] = roomreservation.getReservationEndDateTime();
                row[7] = roomreservation.getNumberOfGuests();
                model.addRow(row);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        ClubDAO = new ClubDAO();
        RoomDAO = new RoomDAO();
        RoomReservationDAO = new RoomReservationDAO();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerReservationEndDateTime;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePickerReservationStartDateTime;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonClubInsert;
    private javax.swing.JButton jButtonDeleteClub;
    private javax.swing.JButton jButtonInsertRoom;
    private javax.swing.JButton jButtonInsertRoomReservation;
    private javax.swing.JButton jButtonUpdateClub;
    private javax.swing.JButton jButtonUpdateRoom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelClubName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableClub;
    private javax.swing.JTable jTableRoom;
    private javax.swing.JTable jTableRoomReservation;
    private javax.swing.JTextField jTextFieldClubID;
    private javax.swing.JTextField jTextFieldClubID2;
    private javax.swing.JTextField jTextFieldClubMemberCount;
    private javax.swing.JTextField jTextFieldClubName;
    private javax.swing.JTextField jTextFieldClubPresident;
    private javax.swing.JTextField jTextFieldClubRegularMeetingDays;
    private javax.swing.JTextField jTextFieldClubRegularMeetingTimes;
    private javax.swing.JTextField jTextFieldNumberofGuests;
    private javax.swing.JTextField jTextFieldRoomCapacity;
    private javax.swing.JTextField jTextFieldRoomID;
    private javax.swing.JTextField jTextFieldRoomID2;
    private javax.swing.JTextField jTextFieldRoomLocation;
    private javax.swing.JTextField jTextFieldRoomName;
    private javax.swing.JTextField jTextFieldRoomReservationID;
    // End of variables declaration//GEN-END:variables
}
